#############################################################################
###                           --== IMPORTANT ==--                         ###
#############################################################################
# If you require changes to this file you must edit the file within the     #
# original repository.Any changes here will be overwritten when the project #
# is built.                                                                 #
#############################################################################
name: unity_intranet
type: 'php:8.3'
dependencies:
    php:
        composer/composer: ^2
runtime:
    extensions:
        - apcu
        - redis
        - blackfire
disk: 51200
mounts:
    /web/files:
        source: local
        source_path: files
    /tmp:
        source: local
        source_path: tmp
    /private:
        source: local
        source_path: private
    /.drush:
        source: local
        source_path: drush
    /drush-backups:
        source: local
        source_path: drush-backups
    /.console:
        source: local
        source_path: console
    /log:
        source: local
        source_path: log
    /web/.well-known:
        source: local
        source_path: well-known
build:
    flavor: composer
hooks:
    build: "set -e\necho \"Update robots.txt with Unity customisations\"\ncp -f web/robots_unity.txt web/robots.txt\n"
    post_deploy: "set -e\n\n# Save the Fastly service value and overwrite with a dummy one in order to break\n# the connection to Fastly, otherwise any cache clear of any site will purge the\n# entire Fastly cache - we don't want this to happen as we'd like Fastly to continue\n# serving the sites to anonymous users during a release.\necho \"***** Breaking connection to Fastly ******\"\ntemp=$FASTLY_API_SERVICE\nexport FASTLY_API_SERVICE=dummyservice\n\n# For each multi site - run db-updates and import config.\nfor site in uregni pps niaomi\ndo\n  result=$(drush -l $site st | grep \"Drupal bootstrap : Successful\" | awk {'print $4'})\n  if [ \"$result\" = \"Successful\" ]; then\n    # Any properly configured Unity site will have the unity_common module installed.\n    result2=$(drush -l $site pml | grep \"unity_common\" | awk {'print $5'})\n    if [ \"$result2\" = \"Enabled\" ]; then\n      echo \"****** $site deployment ******\"\n      cd /app/web/sites/$site\n      # Disable Fastly logging\n      drush -l $site disable-fastly-logging\n      # Readonlymode module should be installed on all sites,\n      # but we'll just make sure.\n      drush en readonlymode -l $site -y\n      # Set site to readonly just in case editors are logged on.\n      drush -l $site cset readonlymode.settings enabled 1 -y\n      drush -l $site -y cache-rebuild\n      drush -l $site -y updatedb\n      drush -l $site -y config-import\n      # Clear up any erroneous redirects\n      drush -l $site delete-redirects\n      # Import blocks and taxonomies\n      drush -l $site import-all-if-installed safe\n      if [ \"$PLATFORM_ENVIRONMENT_TYPE\" = production ]; then\n        # Disable QA logons\n        drush -l $site bulk_update_qa_accounts disable\n      else\n        # Enable QA logons\n        drush -l $site bulk_update_qa_accounts enable\n      fi\n      # Turn off readonly mode.\n      drush -l $site cset readonlymode.settings enabled 0 -y\n    else\n      echo \"****** Skipping $site as not fully installed ******\"\n      echo \"\"\n    fi\n  else\n    echo \"****** Skipping $site as there is no database ******\"\n    echo \"\"\n  fi\ndone\n\n# Reconnect to Fastly\necho \"***** Reinstate connection to Fastly ******\"\nexport FASTLY_API_SERVICE=$temp\n\n# For each multi site - clear cache (including Fastly cache)\nfor site in uregni pps niaomi\ndo\n  result=$(drush -l $site st | grep \"Drupal bootstrap : Successful\" | awk {'print $4'})\n  if [ \"$result\" = \"Successful\" ]; then\n    # Any properly configured Unity site will have the unity_common module installed.\n    result2=$(drush -l $site pml | grep \"unity_common\" | awk {'print $5'})\n    if [ \"$result2\" = \"Enabled\" ]; then\n      echo \"****** $site cache clear ******\"\n      cd /app/web/sites/$site\n      drush -l $site -y cache-rebuild\n      # Enable Fastly logging\n      drush -l $site enable-fastly-logging\n    fi\n  fi\ndone\n"
web:
    locations:
        /:
            root: web
            expires: 5m
            passthru: /index.php
            allow: false
            rules:
                '\.(jpe?g|png|gif|svgz?|css|js|map|ico|bmp|eot|woff2?|otf|ttf)$':
                    allow: true
                ^/robots\.txt$:
                    allow: true
                ^/sitemap\.xml$:
                    allow: true
                ^\/sites\/.+\/themes\/.+\/images\/favicons\/.+\.webmanifest$:
                    allow: true
                    expires: 2w
                ^/\.well-known/security\.txt$:
                    allow: true
                ^/sites/sites\.php$:
                    scripts: false
                '^/sites/[^/]+/settings.*?\.php$':
                    scripts: false
        /files:
            allow: true
            expires: 1d
            passthru: /index.php
            root: web/files
            scripts: false
            rules:
                ^/sites/default/files/(css|js):
                    expires: 2w
relationships:
    redis: 'redis:redis'
    uregni: 'db:uregni'
    uregni_intranet_solr: 'solr_8_11:uregni'
    pps: 'db:pps'
    pps_intranet_solr: 'solr_8_11:pps'
    niaomi: 'db:niaomi'
    niaomi_intranet_solr: 'solr_8_11:niaomi'
crons:
    uregni:
        spec: '10 * * * *'
        cmd: 'cd web/sites/uregni ; drush core-cron'
    logging:
        spec: '*/5 * * * *'
        commands:
            start: '/bin/bash /app/cronjob.sh'
        shutdown_timeout: 290
    pps:
        spec: '10 * * * *'
        cmd: 'cd web/sites/pps ; drush core-cron'
    niaomi:
        spec: '10 * * * *'
        cmd: 'cd web/sites/niaomi ; drush core-cron'
